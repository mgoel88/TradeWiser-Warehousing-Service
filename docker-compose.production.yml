services:
  # PostgreSQL Database - Production
  database:
    image: postgres:15-alpine
    restart: always
    env_file:
      - .env.production
    environment:
      POSTGRES_DB: ${PGDATABASE}
      POSTGRES_USER: ${PGUSER}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backups:/backups
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost for security
    networks:
      - tradewiser-network
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER} -d ${PGDATABASE}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 80s

  # Redis Cache - Production
  redis:
    image: redis:7-alpine
    restart: always
    env_file:
      - .env.production
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost for security
    networks:
      - tradewiser-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # TradeWiser Application - Production
  app:
    build: 
      context: .
      target: production
    restart: always
    env_file:
      - .env.production
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - PORT=5000
    ports:
      - "5000:5000"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./certs:/certs:ro  # SSL certificates (if using HTTPS)
    networks:
      - tradewiser-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/test"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # Nginx Reverse Proxy (optional for production)
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - tradewiser-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Backup Service
  db-backup:
    image: postgres:15-alpine
    restart: unless-stopped
    env_file:
      - .env.production
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - tradewiser-network
    depends_on:
      - database
    command: >
      sh -c "
        echo '0 2 * * * /backup.sh' | crontab -
        && crond -f
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  tradewiser-network:
    driver: bridge